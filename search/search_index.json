{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"","title":"Welcome to MkDocs"},{"location":"\u64cd\u4f5c\u7cfb\u7edf\u7b2c\u4e00\u6b21\u5b9e\u9a8c/","text":"\u64cd\u4f5c\u7cfb\u7edf\u7b2c\u4e00\u6b21\u5b9e\u9a8c \u200b \u738b\u6657\u709c 16281049 \u8ba1\u79d11601 1. \uff08\u7cfb\u7edf\u8c03\u7528\u5b9e\u9a8c\uff09\u4e86\u89e3\u7cfb\u7edf\u8c03\u7528\u4e0d\u540c\u7684\u5c01\u88c5\u5f62\u5f0f 1 \u9605\u8bfb\u5206\u522b\u8fd0\u884c\u7528API\u63a5\u53e3\u51fd\u6570getpid()\u76f4\u63a5\u8c03\u7528\u548c\u6c47\u7f16\u4e2d\u65ad\u8c03\u7528\u4e24\u79cd\u65b9\u5f0f\u8c03\u7528Linux\u64cd\u4f5c\u7cfb\u7edf\u7684\u540c\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528getpid\u7684\u7a0b\u5e8f(\u8bf7\u95eegetpid\u7684\u7cfb\u7edf\u8c03\u7528\u53f7\u662f\u591a\u5c11\uff1flinux\u7cfb\u7edf\u8c03\u7528\u7684\u4e2d\u65ad\u5411\u91cf\u53f7\u662f\u591a\u5c11\uff1f)\u3002 \u8c03\u7528API\u63a5\u53e3\u51fd\u6570\uff1a \u6e90\u4ee3\u7801 getpid.c : ```c #include #include int main(){ pid_t pid; pid = getpid(); printf(\"%d\\n\",pid); return 0; } ``` \u5728linux\u7cfb\u7edf\u4e0a\u7f16\u8bd1\u5e76\u8fd0\u884c\uff1a \u8c03\u7528\u6c47\u7f16\u4e2d\u65ad\uff1a \u6e90\u4ee3\u7801 assembly.c : ```c #include #include int main(){ pid_t pid; asm volatile( \"mov $0,%%ebx\\n\\t\" \"mov $0 14,%%eax\\n\\t\" \"int $0 80\\n\\t\" \"mov %%eax,%0\\n\\t\" :\"=m\"(pid) ); printf(\"%d\\n\",pid); return 0; } ``` \u5728linux\u4e0a\u7f16\u8bd1\u5e76\u8fd0\u884c\uff1a \u7531\u4ee5\u4e0a\u8fd0\u884c\u7ed3\u679c\u53ef\u77e5\u8fd9\u4e24\u79cd\u65b9\u5f0f\u90fd\u53ef\u4ee5\u987a\u5229\u83b7\u53d6\u8fdb\u7a0b\u53f7\uff0c\u5176\u4e2d\u7b2c\u4e00\u79cd\u65b9\u5f0f\u76f4\u63a5\u8c03\u7528\u4e86linux\u7cfb\u7edf\u5185\u5c01\u88c5\u597d\u7684getpid()\u51fd\u6570\uff0c\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u9009\u7528\u6c47\u7f16\u8bed\u8a00\u4e2d\u7684\u8f6f\u4e2d\u65ad\u65b9\u5f0f\uff0c\u8c03\u75280\u00d780\u53f7\u4e2d\u65ad\uff0c\u5728C\u6e90\u6587\u4ef6\u4e2d\u5d4c\u5165\u6c47\u7f16\u8bed\u8a00\u5b8c\u6210\u4e2d\u65ad\u8c03\u7528\u3002 \u901a\u8fc7\u67e5\u9605Linux\u7cfb\u7edf\u4e2d\u7684unistd.h\u5934\u6587\u4ef6\u53ef\u4ee5\u627e\u5230\u4e3agetpid\u8bbe\u7f6e\u7684\u7cfb\u7edf\u8c03\u7528\u53f7\u4e3a172\uff08\u5176\u67e5\u627e\u8fc7\u7a0b\u5982\u4e0b\uff09 \u901a\u8fc7\u9605\u8bfb\u7ed9\u51fa\u7684\u6c47\u7f16\u4ee3\u7801\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5176\u4e2d\u65ad\u5411\u91cf\u53f7\u4e4b\u540e\u7684\u529f\u80fd\u53f7\u5e76\u4e0d\u4e3a172\uff0c\u800c\u662f0\u00d714\uff0c\u537320\u3002\u4f46\u7a0b\u5e8f\u5e76\u6ca1\u6709\u51fa\u73b0\u95ee\u9898\uff0c\u4ecd\u6210\u529f\u8fd4\u56de\u4e86\u6211\u4eec\u9700\u8981\u7684\u8fdb\u7a0b\u53f7\u3002\u4e4b\u540e\u81ea\u5df1\u4e0a\u7f51\u67e5\u9605\u4e86\u76f8\u5173\u8d44\u6599\uff0c\u53d1\u73b032\u4f4d\u548c64\u4f4d\u7684Linux\u7cfb\u7edf\u4e2d\u7684\u7cfb\u7edf\u8c03\u7528\u53f7\u5e76\u4e0d\u76f8\u540c\uff0c\u5e76\u5206\u522b\u5b58\u50a8\u5728unistd_32.h\u548cunistd_64.h\u5934\u6587\u4ef6\u4e2d\uff0c\u572832\u4f4d\u7cfb\u7edf\u4e2dgetpid\u7684\u7cfb\u7edf\u8c03\u7528\u53f7\u4e3a20\uff0c\u4e0e\u6211\u4eec\u7f16\u5199\u7684\u6c47\u7f16\u7a0b\u5e8f\u4e00\u81f4\uff0c64\u4f4d\u7cfb\u7edf\u4e2d\u7684getpid\u7684\u7cfb\u7edf\u8c03\u7528\u53f7\u4e3a39\u3002\u800c\u5bf9\u4e8e64\u4f4d\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0c\u57fa\u672c\u4e0a\u5df2\u7ecf\u629b\u5f03\u4e86int 80\u8fd9\u79cd\u8001\u65e7\u7684\u7cfb\u7edf\u8c03\u7528\u7684\u65b9\u5f0f\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662fsyscall\u8fd9\u4e2a\u51fd\u6570\u3002\u4f46\u5982\u679c\u4ecd\u572864\u4f4d\u7cfb\u7edf\u4e2d\u4f7f\u7528int 80\u8fd9\u79cd\u8f6f\u4e2d\u65ad\u65b9\u5f0f\u8fdb\u884c\u7cfb\u7edf\u8c03\u7528\uff0c\u4fbf\u8fd8\u662f\u9075\u5faa\u539f\u514832\u4f4d\u7cfb\u7edf\u4e2d\u7684\u7cfb\u7edf\u8c03\u7528\u53f7\uff0c\u8fd9\u7b97\u662f64\u4f4d\u7cfb\u7edf\u5bf9\u4e4b\u524d\u7cfb\u7edf\u7684\u4e00\u79cd\u517c\u5bb9\u3002\u81f3\u6b64\u524d\u9762\u7684\u7591\u95ee\u5df2\u7ecf\u80fd\u5f97\u5230\u89e3\u91ca\u3002 2 \u4e0a\u673a\u5b8c\u6210\u4e60\u98981.13 \u9996\u5148\u76f4\u63a5\u4f7f\u7528C\u8bed\u8a00\u5b9e\u73b0\u9700\u6c42\uff1a \u6e90\u4ee3\u7801 hello_linux.c : ```c #include int main(){ printf(\"Hello Linux\\n\"); return 0; } ``` \u5728Linux\u7cfb\u7edf\u4e2d\u4f7f\u7528gcc\u7f16\u8bd1\u5e76\u6267\u884c\uff1a \u53ef\u77e5\u5f97\u5230\u4e86\u5bf9\u5e94\u7684\u7ed3\u679c \u968f\u540e\u4f7f\u7528\u6c47\u7f16\u8bed\u8a00\u5b9e\u73b0\u9700\u6c42\uff1a \u6e90\u4ee3\u7801 hello_linux.asm : c section data string db \"Hello Linux\" len equ $-msg section .text global _start _start: mov eax,4 mov ebx,1 mov ecx,string mov edx,len int 0x80 mov eax,1 mov ebx,0 int 0x80 \u53ef\u89c1\u8f93\u51fa\u7ed3\u679c\u6b63\u786e\uff0c\u6c47\u7f16\u8c03\u7528\u6210\u529f 3 \u9605\u8bfbpintos\u64cd\u4f5c\u7cfb\u7edf\u6e90\u4ee3\u7801\uff0c\u753b\u51fa\u7cfb\u7edf\u8c03\u7528\u5b9e\u73b0\u7684\u6d41\u7a0b\u56fe\u3002 \u9996\u5148\u53ef\u4ee5\u5728github\u4e0a\u7684Pintos\u9879\u76ee\u4e2d\u67e5\u9605\u5176\u6e90\u4ee3\u7801\uff0c\u5728 Pintos / src /lib/syscall-nr.h\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4e00\u7cfb\u5217\u7684\u7cfb\u7edf\u8c03\u7528\u53f7\uff1a ```c { / Projects 2 and later. / SYS_HALT, / Halt the operating system. / SYS_EXIT, / Terminate this process. / SYS_EXEC, / Start another process. / SYS_WAIT, / Wait for a child process to die. / SYS_CREATE, / Create a file. / SYS_REMOVE, / Delete a file. / SYS_OPEN, / Open a file. / SYS_FILESIZE, / Obtain a file's size. / SYS_READ, / Read from a file. / SYS_WRITE, / Write to a file. / SYS_SEEK, / Change position in a file. / SYS_TELL, / Report current position in a file. / SYS_CLOSE, / Close a file. / /* Project 3 and optionally project 4. */ SYS_MMAP, /* Map a file into memory. */ SYS_MUNMAP, /* Remove a memory mapping. */ /* Project 4 only. */ SYS_CHDIR, /* Change the current directory. */ SYS_MKDIR, /* Create a directory. */ SYS_READDIR, /* Reads a directory entry. */ SYS_ISDIR, /* Tests if a fd represents a directory. */ SYS_INUMBER /* Returns the inode number for a fd. */ }; ``` \u8fd9\u4e2a\u8c03\u7528\u8868\u4e2d\u7ed9\u51fa\u4e86pintos\u7cfb\u7edf\u80fd\u5b9e\u73b0\u7684\u6240\u6709\u7cfb\u7edf\u8c03\u7528 \u968f\u540e\u7ee7\u7eed\u6253\u5f00Pintos/src/lib/user/syscall.c\uff0c\u91cc\u9762\u5148\u7ed9\u51fa\u4e864\u4e2d\u7cfb\u7edf\u8c03\u7528\u51fd\u6570\u7684\u8c03\u7528\u65b9\u5f0f\uff0c\u5206\u522b\u4e3asyscall0,syscall1,syscall2,syscall3\uff0c\u6bcf\u79cd\u65b9\u5f0f\u9700\u8981\u4f20\u5165\u7684\u53c2\u6570\u4e0d\u540c\uff0c\u4f46\u6240\u6709\u65b9\u5f0f\u90fd\u5fc5\u9700\u4f20\u5165\u7cfb\u7edf\u8c03\u7528\u53f7\u3002 \u5176\u540e\u8fd8\u7ed9\u51fa\u4e86\u4e0e\u4e0a\u8868\u5bf9\u5e94\u7684\u5c01\u88c5\u5b8c\u6210\u7684\u51fd\u6570\uff0c\u7cfb\u7edf\u5728\u4f7f\u7528\u8fd9\u4e9b\u51fd\u6570\u7684\u65f6\u5019\u7b80\u6d01\u8c03\u7528\u4e86\u4ee5\u4e0a\u5b9a\u4e49\u7684\u56db\u79cd\u7cfb\u7edf\u8c03\u7528\u51fd\u6570\uff0c\u4ee5\u4e0b\u4e3a\u6b64\u6e90\u6587\u4ef6\u7684\u90e8\u5206\u4ee3\u7801\uff1a ```c #define syscall0(NUMBER) \\ ({ \\ int retval; \\ asm volatile \\ (\"pushl %[number]; int $0x30; addl $4, %%esp\" \\ : \"=a\" (retval) \\ : [number] \"i\" (NUMBER) \\ : \"memory\"); \\ retval; \\ }) / Invokes syscall NUMBER, passing argument ARG0, and returns the return value as an `int'. / #define syscall1(NUMBER, ARG0) \\ ({ \\ int retval; \\ asm volatile \\ (\"pushl %[arg0]; pushl %[number]; int $0x30; addl $8, %%esp\" \\ : \"=a\" (retval) \\ : [number] \"i\" (NUMBER), \\ [arg0] \"g\" (ARG0) \\ : \"memory\"); \\ retval; \\ }) / Invokes syscall NUMBER, passing arguments ARG0 and ARG1, and returns the return value as an `int'. / #define syscall2(NUMBER, ARG0, ARG1) \\ ({ \\ int retval; \\ asm volatile \\ (\"pushl %[arg1]; pushl %[arg0]; \" \\ \"pushl %[number]; int $0x30; addl $12, %%esp\" \\ : \"=a\" (retval) \\ : [number] \"i\" (NUMBER), \\ [arg0] \"g\" (ARG0), \\ [arg1] \"g\" (ARG1) \\ : \"memory\"); \\ retval; \\ }) / Invokes syscall NUMBER, passing arguments ARG0, ARG1, and ARG2, and returns the return value as an `int'. / #define syscall3(NUMBER, ARG0, ARG1, ARG2) \\ ({ \\ int retval; \\ asm volatile \\ (\"pushl %[arg2]; pushl %[arg1]; pushl %[arg0]; \" \\ \"pushl %[number]; int $0x30; addl $16, %%esp\" \\ : \"=a\" (retval) \\ : [number] \"i\" (NUMBER), \\ [arg0] \"g\" (ARG0), \\ [arg1] \"g\" (ARG1), \\ [arg2] \"g\" (ARG2) \\ : \"memory\"); \\ retval; \\ }) void exit (int status) { syscall1 (SYS_EXIT, status); NOT_REACHED (); } pid_t exec (const char *file) { return (pid_t) syscall1 (SYS_EXEC, file); } int wait (pid_t pid) { return syscall1 (SYS_WAIT, pid); } bool create (const char *file, unsigned initial_size) { return syscall2 (SYS_CREATE, file, initial_size); } bool remove (const char *file) { return syscall1 (SYS_REMOVE, file); } ``` \u968f\u540e\u6211\u4eec\u8fdb\u4e00\u6b65\u5728\u8be5\u6e90\u4ee3\u7801\u4e2d\u7684\u4e2d\u7684Pintos/src/userprog/syscall.c\u6587\u4ef6\u4e2d\u627e\u5230\u4e86\u4e2d\u65ad\u521d\u59cb\u51fd\u6570\uff1a c void syscall_init (void) { intr_register_int (0x30, 3, INTR_ON, syscall_handler, \"syscall\"); } \u5728\u6b64\u51fd\u6570\u4e2d\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u4e2d\u65ad\u8c03\u7528\u7684\u4e2d\u65ad\u53f7\u4e3a0\u00d730\uff0c\u5e76\u5141\u8bb8\u4e2d\u65ad\u5d4c\u5957\uff0c\u6839\u636e\u5176\u6587\u4ef6\u6240include\u7684\u6587\u4ef6\uff0c\u6211\u4eec\u627e\u5230threads/interrupt.c\u6587\u4ef6\uff0c\u5176\u4e2dintr_register_int\u51fd\u6570\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a c void intr_register_int (uint8_t vec_no, int dpl, enum intr_level level, intr_handler_func *handler, const char *name) { ASSERT (vec_no < 0x20 || vec_no > 0x2f); register_handler (vec_no, dpl, level, handler, name); } \u8fd9\u91cc\u4f20\u5165\u7684\u53c2\u6570\u7b26\u5408\u65ad\u8a00\u8981\u6c42\uff0c\u56e0\u6b64\u53c8\u8fdb\u5165\u4e86register_handler\u51fd\u6570\uff0c\u6b64\u51fd\u6570\u4e2d\u4f7f\u7528\u7684\u6570\u7ec4\u5219\u6d89\u53ca\u5230intr-stubs.S\u6c47\u7f16\u6587\u4ef6\u7684\u6570\u7ec4\uff0c\u5176\u4e2d\u7684\u4fe1\u606f\u5305\u62ec\u4e86\u8c03\u7528\u7684\u529f\u80fd\u53f7\u53ca\u5176\u4ed6\u9650\u5236\u4fe1\u606f\u3002\u81f3\u6b64\u7cfb\u7edf\u8c03\u7528\u7684\u8fc7\u7a0b\u5168\u90e8\u5b8c\u6210\u3002\u4ee5\u4e0b\u4e3a\u6d41\u7a0b\u56fe\uff1a 2. \uff08\u5e76\u53d1\u5b9e\u9a8c\uff09\u6839\u636e\u4ee5\u4e0b\u4ee3\u7801\u5b8c\u6210\u4e0b\u9762\u7684\u5b9e\u9a8c\u3002 1 \u7f16\u8bd1\u8fd0\u884c\u8be5\u7a0b\u5e8f\uff08cpu.c\uff09\uff0c\u89c2\u5bdf\u8f93\u51fa\u7ed3\u679c\uff0c\u8bf4\u660e\u7a0b\u5e8f\u529f\u80fd\u3002 \u6e90\u7a0b\u5e8f cpu.c : ```c #include #include #include #include #include int main(int argc, char argv[]){ if(argc != 2){ fprintf(stderr,\"usage:cpu \\n\"); exit(1); } char str = argv[1]; while(1){ sleep(1); printf(\"%s\\n\",str); } return 0; } ``` \u4f7f\u7528gcc\u7f16\u8bd1\u8fd0\u884c\uff1a \u7531\u4e0a\u56fe\u53ef\u89c1\u7a0b\u5e8f\u8fd0\u884c\u6210\u529f\uff0c\u901a\u8fc7\u5206\u6790C\u8bed\u8a00\u6e90\u4ee3\u7801\u53ef\u77e5\uff0c\u6b64\u7a0b\u5e8f\u5171\u6709\u4e24\u4e2a\u529f\u80fd\uff0c\u5f53\u4e0d\u8f93\u5165\u53c2\u6570\u6216\u8f93\u5165\u591a\u4e2a\u53c2\u6570\u8fd0\u884c\u65f6\uff0c\u4f1a\u76f4\u63a5\u5728\u5c4f\u5e55\u4e0a\u6253\u5370\u51fa\u6b64\u7a0b\u5e8f\u9700\u8981\u4f20\u5165\u7684\u53c2\u6570\u548c\u7528\u5904\uff0c\u5373\u6253\u5370\u201cusage:cpu \u201d\uff0c\u5f53\u4f20\u5165\u53c2\u6570\u5b57\u7b26\u4e32\u65f6\uff0c\u4fbf\u4f1a\u76f4\u63a5\u5728\u5c4f\u5e55\u4e0a\u5faa\u73af\u6253\u5370\u8f93\u5165\u7684\u5b57\u7b26\u4e32\uff0c\u4ee5\u4e00\u79d2\u4e3a\u95f4\u9694\u3002 2 \u518d\u6b21\u6309\u4e0b\u9762\u7684\u8fd0\u884c\u5e76\u89c2\u5bdf\u7ed3\u679c\uff1a\u6267\u884c\u547d\u4ee4\uff1a./cpu A & ; ./cpu B & ; ./cpu C & ; ./cpu D &\u7a0b\u5e8fcpu\u8fd0\u884c\u4e86\u51e0\u6b21\uff1f\u4ed6\u4eec\u8fd0\u884c\u7684\u987a\u5e8f\u6709\u4f55\u7279\u70b9\u548c\u89c4\u5f8b\uff1f\u8bf7\u7ed3\u5408\u64cd\u4f5c\u7cfb\u7edf\u7684\u7279\u5f81\u8fdb\u884c\u89e3\u91ca\u3002 \u6309\u7167\u8981\u6c42\u8fd0\u884c\u7a0b\u5e8f\uff1a \u4ece\u4e0a\u56fe\u53ef\u4ee5\u5f97\u77e5\u7cfb\u7edf\u4f7f\u7528\u4e86\u56db\u4e2a\u8fdb\u7a0b\u8fd0\u884c\u8be5\u7a0b\u5e8f\uff0c\u6bcf\u9694\u4e00\u79d2\u5728\u5c4f\u5e55\u4e0a\u6253\u5370\u4e00\u6b21ABCD\uff0c\u7531\u4e8e\u7a0b\u5e8f\u672a\u8bbe\u7f6e\u7ec8\u6b62\u6761\u4ef6\uff0c\u6240\u4ee5\u7a0b\u5e8f\u4f1a\u4e00\u76f4\u8fd0\u884c\u4e0b\u53bb\uff0c\u4f46\u7a0b\u5e8f\u8fd0\u884c\u7684\u987a\u5e8f\u5e76\u4e0d\u786e\u5b9a\u3002\u8fd9\u662f\u56e0\u4e3a\u5982\u4eca\u7684\u64cd\u4f5c\u7cfb\u7edf\u5728\u540c\u65f6\u8fd0\u884c\u591a\u4e2a\u7a0b\u5e8f\u65f6\u4f1a\u5e76\u53d1\u6267\u884c\u800c\u4e0d\u662f\u987a\u5e8f\u6267\u884c\uff0c\u4e5f\u5c31\u662f\u5177\u6709\u5e76\u53d1\u7684\u7279\u5f81\u3002\u7a0b\u5e8f\u5728\u5e76\u53d1\u6267\u884c\u65f6\uff0c\u662f\u591a\u4e2a\u7a0b\u5e8f\u5171\u4eab\u7cfb\u7edf\u4e2d\u7684\u5404\u79cd\u8d44\u6e90\uff0c\u56e0\u800c\u8fd9\u4e9b\u8d44\u6e90\u7684\u72b6\u6001\u5c06\u7531\u591a\u4e2a\u7a0b\u5e8f\u6765\u6539\u53d8\uff0c\u81f4\u4f7f\u7a0b\u5e8f\u7684\u8fd0\u884c\u5931\u53bb\u4e86\u5c01\u95ed\u6027\u3002\u8fd9\u6837\uff0c\u67d0\u7a0b\u5e8f\u5728\u6267\u884c\u65f6\uff0c\u5fc5\u7136\u4f1a\u53d7\u5230\u5176\u5b83\u7a0b\u5e8f\u7684\u5f71\u54cd\u3002\u4f8b\u5982\uff0c\u5f53\u5904\u7406\u673a\u8fd9\u4e00\u8d44\u6e90\u5df2\u88ab\u67d0\u4e2a\u7a0b\u5e8f\u5360\u6709\u65f6\uff0c\u53e6\u4e00\u7a0b\u5e8f\u5fc5\u987b\u7b49\u5f85\u3002\u7a0b\u5e8f\u5728\u5e76\u53d1\u6267\u884c\u65f6\uff0c\u7531\u4e8e\u5931\u53bb\u4e86\u5c01\u95ed\u6027\uff0c\u4e5f\u5c06\u5bfc\u81f4\u5176\u518d\u5931\u53bb\u53ef\u518d\u73b0\u6027\u3002\u56e0\u6b64\u6bcf\u4e00\u8f6e\u7a0b\u5e8f\u7684\u8fd0\u884c\u987a\u5e8f\u90fd\u4f1a\u4e0d\u5c3d\u76f8\u540c\u3002 3. \uff08\u5185\u5b58\u5206\u914d\u5b9e\u9a8c\uff09\u6839\u636e\u4ee5\u4e0b\u4ee3\u7801\u5b8c\u6210\u5b9e\u9a8c\u3002 1 \u9605\u8bfb\u5e76\u7f16\u8bd1\u8fd0\u884c\u8be5\u7a0b\u5e8f(mem.c)\uff0c\u89c2\u5bdf\u8f93\u51fa\u7ed3\u679c\uff0c\u8bf4\u660e\u7a0b\u5e8f\u529f\u80fd\u3002 \u7a0b\u5e8f\u6e90\u4ee3\u7801 mem.c \uff1a ```c #include #include #include #include int main(int argc,char argv[]){ int p = malloc(sizeof(int)); //a1 assert(p != NULL); printf(\"(%d) address pointed to by p:%p\\n\",getpid(),p); //a2 p = 0;//a3 while(1){ sleep(1); p = p + 1; printf(\"(%d) p:%d\\n\",getpid(), p);//a4 } return 0; } ``` \u5728Linux\u7cfb\u7edf\u4e0b\u4f7f\u7528gcc\u7f16\u8bd1\u5e76\u8fd0\u884c\uff1a \u7531\u4e0a\u56fe\u7684\u8fd0\u884c\u7ed3\u679c\u7ed3\u5408\u6e90\u7801\u8fdb\u884c\u5206\u6790\u53ef\u77e5\u9053\uff0c\u8be5\u7a0b\u5e8f\u5148\u4e3a\u4e00\u4e2a\u6307\u9488\u7533\u8bf7\u4e86\u4e00\u4e2a\u6574\u6570\u5b57\u7b26\u7a7a\u95f4\u5927\u5c0f\u7684\u7a7a\u95f4\uff0c\u968f\u540e\u6253\u5370\u51fa\u8fdb\u7a0b\u53f7\u548c\u7533\u8bf7\u7684\u5185\u5b58\u7a7a\u95f4\u7684\u9996\u5730\u5740\u5e76\u5c06\u5185\u5b58\u4e2d\u50a8\u5b58\u7684\u6574\u6570\u5b57\u7b26\u7f6e\u4e3a0\u3002\u4e4b\u540e\u6bcf\u9694\u4e00\u79d2\u5c06\u8be5\u6574\u6570\u52a01\u5e76\u6253\u5370\u5176\u503c\u4e8e\u5c4f\u5e55\u4e0a\uff0c\u5faa\u73af\u5f80\u590d\u4e0d\u8bbe\u7ec8\u7ed3\u3002 3.2\u518d\u6b21\u6309\u4e0b\u9762\u7684\u547d\u4ee4\u8fd0\u884c\u5e76\u89c2\u5bdf\u7ed3\u679c\u3002\u4e24\u4e2a\u5206\u522b\u8fd0\u884c\u7684\u7a0b\u5e8f\u5206\u914d\u7684\u5185\u5b58\u5730\u5740\u662f\u5426\u76f8\u540c\uff1f\u662f\u5426\u5171\u4eab\u540c\u4e00\u5757\u7269\u7406\u5185\u5b58\u533a\u57df\uff1f\u4e3a\u4ec0\u4e48\uff1f \u6309\u7167\u9898\u76ee\u8981\u6c42\u540c\u65f6\u8fd0\u884c\u4e24\u4e2amem\u7a0b\u5e8f \u7531\u4e0a\u56fe\u7684\u7ed3\u679c\u6211\u4eec\u53ef\u4ee5\u5f97\u77e5\u4e24\u4e2a\u8fdb\u7a0b\u5206\u522b\u7ed9\u4e0e\u4e86\u4e0d\u540c\u7684\u5185\u5b58\u5730\u5740\uff0c\u5176\u64cd\u4f5c\u7684\u6570\u503c\u4e92\u4e0d\u5e72\u6270\uff0c\u5e76\u53d1\u8fd0\u884c\u3002\u8868\u9762\u4e0a\u770b\u5e76\u6ca1\u6709\u5171\u4eab\u4e00\u5757\u5185\u5b58\u5730\u5740\u3002\u901a\u8fc7\u67e5\u9605\u76f8\u5173\u8d44\u6599\uff0cLinux\u4e2d\u7684\u8fdb\u7a0b\u5185\u5b58\u7ba1\u7406\u91c7\u7528\u7684\u662f\u865a\u62df\u5185\u5b58\u7ba1\u7406\u6280\u672f\uff0cLinux\u64cd\u4f5c\u7cfb\u7edf\u91c7\u7528\u865a\u62df\u5185\u5b58\u7ba1\u7406\u6280\u672f\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u5404\u81ea\u4e92\u4e0d\u5e72\u6d89\u7684\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\u3002\u8be5\u7a7a\u95f4\u662f\u5757\u5927\u5c0f\u4e3a4G\u7684\u7ebf\u6027\u865a\u62df\u7a7a\u95f4\uff0c\u7528\u6237\u6240\u770b\u5230\u548c\u63a5\u89e6\u5230\u7684\u90fd\u662f\u8be5\u865a\u62df\u5730\u5740\uff0c\u65e0\u6cd5\u770b\u5230\u5b9e\u9645\u7684\u7269\u7406\u5185\u5b58\u5730\u5740\u3002\u5229\u7528\u8fd9\u79cd\u865a\u62df\u5730\u5740\u4e0d\u4f46\u80fd\u8d77\u5230\u4fdd\u62a4\u64cd\u4f5c\u7cfb\u7edf\u7684\u6548\u679c\uff08\u7528\u6237\u4e0d\u80fd\u76f4\u63a5\u8bbf\u95ee\u7269\u7406\u5185\u5b58\uff09\uff0c\u800c\u4e14\u66f4\u91cd\u8981\u7684\u662f\uff0c\u7528\u6237\u7a0b\u5e8f\u53ef\u4f7f\u7528\u6bd4\u5b9e\u9645\u7269\u7406\u5185\u5b58\u66f4\u5927\u7684\u5730\u5740\u7a7a\u95f4\u3002 \u6bcf\u4e00\u4e2a\u8fdb\u7a0b\u90fd\u8fd0\u884c\u5728\u4e00\u4e2a\u5c5e\u4e8e\u5b83\u81ea\u5df1\u7684\u5185\u5b58\u6c99\u76d8\u4e2d\uff0c\u8fd9\u4e2a\u6c99\u76d8\u5c31\u662f\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff0c\u572832\u4f4d\u6a21\u5f0f\u4e0b\u5b83\u603b\u662f\u4e00\u4e2a4GB\u7684\u5185\u5b58\u5730\u5740\u5757\u3002\u8fd9\u4e9b\u865a\u62df\u5730\u5740\u901a\u8fc7\u9875\u8868\u6620\u5c04\u5230\u7269\u7406\u5185\u5b58\uff0c\u9875\u8868\u7531\u64cd\u4f5c\u7cfb\u7edf\u7ef4\u62a4\u5e76\u88ab\u5904\u7406\u5668\u5f15\u7528\u3002\u56e0\u6b64\u867d\u7136\u4e24\u4e2a\u8fdb\u7a0b\u7684\u865a\u62df\u5185\u5b58\u5730\u5740\u5e76\u4e0d\u76f8\u540c\uff0c\u4e5f\u4e0d\u4ee3\u8868\u5b83\u4eec\u7684\u5b9e\u9645\u5185\u5b58\u5730\u5740\u4e0d\u540c\uff0c\u4f46\u5b83\u4eec\u4e00\u5b9a\u90fd\u5e94\u7528\u7684\u662f\u540c\u4e00\u5757\u8fde\u7eed\u7684\u5185\u5b58\u5757\u3002 4. \uff08\u5171\u4eab\u7684\u95ee\u9898\uff09\u6839\u636e\u4ee5\u4e0b\u4ee3\u7801\u5b8c\u6210\u5b9e\u9a8c\u3002 1\u9605\u8bfb\u5e76\u7f16\u8bd1\u8fd0\u884c\u8be5\u7a0b\u5e8f\uff0c\u89c2\u5bdf\u8f93\u51fa\u7ed3\u679c\uff0c\u8bf4\u660e\u7a0b\u5e8f\u529f\u80fd\u3002 \u7a0b\u5e8f\u6e90\u4ee3\u7801 thread.c : ```c #include #include #include #include volatile int counter = 0; int loops; void worker(void arg){ int i; for(i = 0;i < loops;i++){ counter++; } return NULL; } int main(int argc,char *argv[]){ if(argc != 2){ fprintf(stderr,\"usage:threads \\n\"); exit(1); } loops = atoi(argv[1]); pthread_t p1,p2; printf(\"Initial value:%d\\n\",counter); pthread_create(&p1,NULL,worker,NULL); pthread_create(&p2,NULL,worker,NULL); pthread_join(p1,NULL); pthread_join(p2,NULL); printf(\"Final value:%d\\n\",counter); return 0; } ``` \u5728Linux\u4e0b\u4f7f\u7528gcc\u7f16\u8bd1\u5e76\u8fd0\u884c\uff1a \u7531\u4ee5\u4e0a\u7ed3\u679c\u7ed3\u5408\u6e90\u4ee3\u7801\u5206\u6790\u53ef\u77e5\uff0c\u5f53\u4e0d\u8f93\u5165\u4efb\u4f55\u53c2\u6570\u6216\u8005\u8f93\u5165\u591a\u4e2a\u53c2\u6570\u65f6\u7a0b\u5e8f\u4f1a\u8fdb\u884c\u62a5\u9519\uff0c\u5728\u5c4f\u5e55\u4e0a\u6253\u5370\u51fa\u7a0b\u5e8f\u7684\u4f7f\u7528\u65b9\u6cd5\u3002\u5f53\u8f93\u5165\u53c2\u6570\uff08\u59821000\uff09\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u4f7f\u7528\u4e24\u4e2a\u8fdb\u7a0b\u5bf9\u5171\u540c\u53d8\u91cfcounter\u53d8\u91cf\u8fdb\u884c\u5faa\u73af\u52a01\uff0c\u5faa\u73af\u6b21\u6570\u4e3aloops\u7684\u503c\uff0c\u5373\u8f93\u5165\u53c2\u6570\u7684\u5927\u5c0f\uff0c\u6700\u540e\u5c06counter\u7684\u503c\u6253\u5370\u5728\u5c4f\u5e55\u4e0a\u3002 4.2 \u5c1d\u8bd5\u5176\u4ed6\u8f93\u5165\u53c2\u6570\u5e76\u6267\u884c\uff0c\u5e76\u603b\u7ed3\u6267\u884c\u7ed3\u679c\u7684\u6709\u4f55\u89c4\u5f8b\uff1f\u4f60\u80fd\u5c1d\u8bd5\u89e3\u91ca\u5b83\u5417\uff1f\uff08\u4f8b\u5982\u6267\u884c\u547d\u4ee42\uff1a./thread 100000\uff09 \u5f53\u8f93\u5165\u53c2\u6570100000\u4e4b\u540e\uff0c\u53ef\u4ee5\u53d1\u73b0\u6253\u5370\u51fa\u6765\u7684\u6700\u540e\u7ed3\u679c\u5e76\u4e0d\u4e3a200000\uff0c\u800c\u662f\u8fdc\u5c0f\u4e8e\u5b83\uff0c\u968f\u540e\u81ea\u5df1\u5c1d\u8bd5\u4e86\u66f4\u5927\u7684\u53c2\u6570\uff0c\u7ed3\u679c\u4e5f\u662f\u5982\u6b64\u3002\u901a\u8fc7\u67e5\u627e\u76f8\u5173\u8d44\u6599\u53ef\u4ee5\u5f97\u77e5volatile\u5173\u952e\u5b57\u53ef\u4ee5\u88ab\u89e3\u91ca\u4e3a\u201c\u76f4\u63a5\u5b58\u53d6\u539f\u59cb\u5185\u5b58\u5730\u5740\u201d\uff0c\u56e0\u6b64\u6bcf\u6b21\u7f16\u8bd1\u5668\u5c31\u4f1a\u76f4\u63a5\u4ece\u5185\u5b58\u5730\u5740\u4e2d\u8bfb\u53d6\u8be5\u5173\u952e\u5b57\u4fee\u9970\u7684\u53d8\u91cf\u7684\u503c\uff0c\u5f53\u4e24\u4e2a\u7ebf\u7a0b\u90fd\u8981\u7528\u5230\u67d0\u4e00\u4e2a\u53d8\u91cf\u4e14\u8be5\u53d8\u91cf\u7684\u503c\u4f1a\u88ab\u6539\u53d8\u65f6\uff0c\u5e94\u8be5\u7528 volatile \u58f0\u660e\uff0c\u8be5\u5173\u952e\u5b57\u7684\u4f5c\u7528\u662f\u9632\u6b62\u4f18\u5316\u7f16\u8bd1\u5668\u628a\u53d8\u91cf\u4ece\u5185\u5b58\u88c5\u5165CPU\u5bc4\u5b58\u5668\u4e2d\u3002\u5982\u679c\u53d8\u91cf\u88ab\u88c5\u5165\u5bc4\u5b58\u5668\uff0c\u90a3\u4e48\u4e24\u4e2a\u7ebf\u7a0b\u6709\u53ef\u80fd\u4e00\u4e2a\u4f7f\u7528\u5185\u5b58\u4e2d\u7684\u53d8\u91cf\uff0c\u4e00\u4e2a\u4f7f\u7528\u5bc4\u5b58\u5668\u4e2d\u7684\u53d8\u91cf\uff0c\u8fd9\u4f1a\u9020\u6210\u7a0b\u5e8f\u7684\u9519\u8bef\u6267\u884c\u3002 \u4f46\u5355\u7eaf\u4f7f\u7528\u8be5\u5173\u952e\u5b57\u800c\u6ca1\u6709\u9501\u7684\u673a\u5236\uff0c\u4f1a\u662f\u8fdb\u7a0b\u8bfb\u51fa\u810f\u6570\u636e\uff0c\u5373\u8fc7\u65f6\u7684\u6570\u636e\uff0c\u5728\u672c\u7a0b\u5e8f\u4e2d\u53ef\u8868\u73b0\u4e3a\u8fdb\u7a0b1\u521a\u4ece\u5185\u5b58\u4e2d\u8bfb\u51fa\u6570\u636e\u5e76\u52a01\uff0c\u5728\u5b83\u4fdd\u5b58\u56de\u5176\u5185\u5b58\u4e4b\u524d\uff0c\u8fdb\u7a0b2\u5c31\u5df2\u7ecf\u8bfb\u51fa\u4e86\u5185\u5b58\u4e2d\u7684\u6570\u503c\u5e76\u8fdb\u884c\u8fd0\u7b97\uff0c\u6240\u4ee5\u672c\u8be5\u6709\u4e24\u6b21\u52a0\u6cd5\u8fd0\u7b97\u7684\u503c\u6700\u540e\u7684\u7ed3\u679c\u53ea\u8fdb\u884c\u4e86\u4e00\u6b21\u8fd0\u7b97\uff0c\u9020\u6210\u4e86\u6700\u7ec8\u7ed3\u679c\u8fdc\u5c0f\u4e8eloops\u503c\u7684\u4e24\u500d\u3002","title":"\u64cd\u4f5c\u7cfb\u7edf\u7b2c\u4e00\u6b21\u5b9e\u9a8c"},{"location":"\u64cd\u4f5c\u7cfb\u7edf\u7b2c\u4e00\u6b21\u5b9e\u9a8c/#_1","text":"\u200b \u738b\u6657\u709c 16281049 \u8ba1\u79d11601","title":"\u64cd\u4f5c\u7cfb\u7edf\u7b2c\u4e00\u6b21\u5b9e\u9a8c"},{"location":"\u64cd\u4f5c\u7cfb\u7edf\u7b2c\u4e00\u6b21\u5b9e\u9a8c/#1","text":"1 \u9605\u8bfb\u5206\u522b\u8fd0\u884c\u7528API\u63a5\u53e3\u51fd\u6570getpid()\u76f4\u63a5\u8c03\u7528\u548c\u6c47\u7f16\u4e2d\u65ad\u8c03\u7528\u4e24\u79cd\u65b9\u5f0f\u8c03\u7528Linux\u64cd\u4f5c\u7cfb\u7edf\u7684\u540c\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528getpid\u7684\u7a0b\u5e8f(\u8bf7\u95eegetpid\u7684\u7cfb\u7edf\u8c03\u7528\u53f7\u662f\u591a\u5c11\uff1flinux\u7cfb\u7edf\u8c03\u7528\u7684\u4e2d\u65ad\u5411\u91cf\u53f7\u662f\u591a\u5c11\uff1f)\u3002 \u8c03\u7528API\u63a5\u53e3\u51fd\u6570\uff1a \u6e90\u4ee3\u7801 getpid.c : ```c #include #include int main(){ pid_t pid; pid = getpid(); printf(\"%d\\n\",pid); return 0; } ``` \u5728linux\u7cfb\u7edf\u4e0a\u7f16\u8bd1\u5e76\u8fd0\u884c\uff1a \u8c03\u7528\u6c47\u7f16\u4e2d\u65ad\uff1a \u6e90\u4ee3\u7801 assembly.c : ```c #include #include int main(){ pid_t pid; asm volatile( \"mov $0,%%ebx\\n\\t\" \"mov $0 14,%%eax\\n\\t\" \"int $0 80\\n\\t\" \"mov %%eax,%0\\n\\t\" :\"=m\"(pid) ); printf(\"%d\\n\",pid); return 0; } ``` \u5728linux\u4e0a\u7f16\u8bd1\u5e76\u8fd0\u884c\uff1a \u7531\u4ee5\u4e0a\u8fd0\u884c\u7ed3\u679c\u53ef\u77e5\u8fd9\u4e24\u79cd\u65b9\u5f0f\u90fd\u53ef\u4ee5\u987a\u5229\u83b7\u53d6\u8fdb\u7a0b\u53f7\uff0c\u5176\u4e2d\u7b2c\u4e00\u79cd\u65b9\u5f0f\u76f4\u63a5\u8c03\u7528\u4e86linux\u7cfb\u7edf\u5185\u5c01\u88c5\u597d\u7684getpid()\u51fd\u6570\uff0c\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u9009\u7528\u6c47\u7f16\u8bed\u8a00\u4e2d\u7684\u8f6f\u4e2d\u65ad\u65b9\u5f0f\uff0c\u8c03\u75280\u00d780\u53f7\u4e2d\u65ad\uff0c\u5728C\u6e90\u6587\u4ef6\u4e2d\u5d4c\u5165\u6c47\u7f16\u8bed\u8a00\u5b8c\u6210\u4e2d\u65ad\u8c03\u7528\u3002 \u901a\u8fc7\u67e5\u9605Linux\u7cfb\u7edf\u4e2d\u7684unistd.h\u5934\u6587\u4ef6\u53ef\u4ee5\u627e\u5230\u4e3agetpid\u8bbe\u7f6e\u7684\u7cfb\u7edf\u8c03\u7528\u53f7\u4e3a172\uff08\u5176\u67e5\u627e\u8fc7\u7a0b\u5982\u4e0b\uff09 \u901a\u8fc7\u9605\u8bfb\u7ed9\u51fa\u7684\u6c47\u7f16\u4ee3\u7801\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5176\u4e2d\u65ad\u5411\u91cf\u53f7\u4e4b\u540e\u7684\u529f\u80fd\u53f7\u5e76\u4e0d\u4e3a172\uff0c\u800c\u662f0\u00d714\uff0c\u537320\u3002\u4f46\u7a0b\u5e8f\u5e76\u6ca1\u6709\u51fa\u73b0\u95ee\u9898\uff0c\u4ecd\u6210\u529f\u8fd4\u56de\u4e86\u6211\u4eec\u9700\u8981\u7684\u8fdb\u7a0b\u53f7\u3002\u4e4b\u540e\u81ea\u5df1\u4e0a\u7f51\u67e5\u9605\u4e86\u76f8\u5173\u8d44\u6599\uff0c\u53d1\u73b032\u4f4d\u548c64\u4f4d\u7684Linux\u7cfb\u7edf\u4e2d\u7684\u7cfb\u7edf\u8c03\u7528\u53f7\u5e76\u4e0d\u76f8\u540c\uff0c\u5e76\u5206\u522b\u5b58\u50a8\u5728unistd_32.h\u548cunistd_64.h\u5934\u6587\u4ef6\u4e2d\uff0c\u572832\u4f4d\u7cfb\u7edf\u4e2dgetpid\u7684\u7cfb\u7edf\u8c03\u7528\u53f7\u4e3a20\uff0c\u4e0e\u6211\u4eec\u7f16\u5199\u7684\u6c47\u7f16\u7a0b\u5e8f\u4e00\u81f4\uff0c64\u4f4d\u7cfb\u7edf\u4e2d\u7684getpid\u7684\u7cfb\u7edf\u8c03\u7528\u53f7\u4e3a39\u3002\u800c\u5bf9\u4e8e64\u4f4d\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0c\u57fa\u672c\u4e0a\u5df2\u7ecf\u629b\u5f03\u4e86int 80\u8fd9\u79cd\u8001\u65e7\u7684\u7cfb\u7edf\u8c03\u7528\u7684\u65b9\u5f0f\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662fsyscall\u8fd9\u4e2a\u51fd\u6570\u3002\u4f46\u5982\u679c\u4ecd\u572864\u4f4d\u7cfb\u7edf\u4e2d\u4f7f\u7528int 80\u8fd9\u79cd\u8f6f\u4e2d\u65ad\u65b9\u5f0f\u8fdb\u884c\u7cfb\u7edf\u8c03\u7528\uff0c\u4fbf\u8fd8\u662f\u9075\u5faa\u539f\u514832\u4f4d\u7cfb\u7edf\u4e2d\u7684\u7cfb\u7edf\u8c03\u7528\u53f7\uff0c\u8fd9\u7b97\u662f64\u4f4d\u7cfb\u7edf\u5bf9\u4e4b\u524d\u7cfb\u7edf\u7684\u4e00\u79cd\u517c\u5bb9\u3002\u81f3\u6b64\u524d\u9762\u7684\u7591\u95ee\u5df2\u7ecf\u80fd\u5f97\u5230\u89e3\u91ca\u3002 2 \u4e0a\u673a\u5b8c\u6210\u4e60\u98981.13 \u9996\u5148\u76f4\u63a5\u4f7f\u7528C\u8bed\u8a00\u5b9e\u73b0\u9700\u6c42\uff1a \u6e90\u4ee3\u7801 hello_linux.c : ```c #include int main(){ printf(\"Hello Linux\\n\"); return 0; } ``` \u5728Linux\u7cfb\u7edf\u4e2d\u4f7f\u7528gcc\u7f16\u8bd1\u5e76\u6267\u884c\uff1a \u53ef\u77e5\u5f97\u5230\u4e86\u5bf9\u5e94\u7684\u7ed3\u679c \u968f\u540e\u4f7f\u7528\u6c47\u7f16\u8bed\u8a00\u5b9e\u73b0\u9700\u6c42\uff1a \u6e90\u4ee3\u7801 hello_linux.asm : c section data string db \"Hello Linux\" len equ $-msg section .text global _start _start: mov eax,4 mov ebx,1 mov ecx,string mov edx,len int 0x80 mov eax,1 mov ebx,0 int 0x80 \u53ef\u89c1\u8f93\u51fa\u7ed3\u679c\u6b63\u786e\uff0c\u6c47\u7f16\u8c03\u7528\u6210\u529f 3 \u9605\u8bfbpintos\u64cd\u4f5c\u7cfb\u7edf\u6e90\u4ee3\u7801\uff0c\u753b\u51fa\u7cfb\u7edf\u8c03\u7528\u5b9e\u73b0\u7684\u6d41\u7a0b\u56fe\u3002 \u9996\u5148\u53ef\u4ee5\u5728github\u4e0a\u7684Pintos\u9879\u76ee\u4e2d\u67e5\u9605\u5176\u6e90\u4ee3\u7801\uff0c\u5728 Pintos / src /lib/syscall-nr.h\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4e00\u7cfb\u5217\u7684\u7cfb\u7edf\u8c03\u7528\u53f7\uff1a ```c { / Projects 2 and later. / SYS_HALT, / Halt the operating system. / SYS_EXIT, / Terminate this process. / SYS_EXEC, / Start another process. / SYS_WAIT, / Wait for a child process to die. / SYS_CREATE, / Create a file. / SYS_REMOVE, / Delete a file. / SYS_OPEN, / Open a file. / SYS_FILESIZE, / Obtain a file's size. / SYS_READ, / Read from a file. / SYS_WRITE, / Write to a file. / SYS_SEEK, / Change position in a file. / SYS_TELL, / Report current position in a file. / SYS_CLOSE, / Close a file. / /* Project 3 and optionally project 4. */ SYS_MMAP, /* Map a file into memory. */ SYS_MUNMAP, /* Remove a memory mapping. */ /* Project 4 only. */ SYS_CHDIR, /* Change the current directory. */ SYS_MKDIR, /* Create a directory. */ SYS_READDIR, /* Reads a directory entry. */ SYS_ISDIR, /* Tests if a fd represents a directory. */ SYS_INUMBER /* Returns the inode number for a fd. */ }; ``` \u8fd9\u4e2a\u8c03\u7528\u8868\u4e2d\u7ed9\u51fa\u4e86pintos\u7cfb\u7edf\u80fd\u5b9e\u73b0\u7684\u6240\u6709\u7cfb\u7edf\u8c03\u7528 \u968f\u540e\u7ee7\u7eed\u6253\u5f00Pintos/src/lib/user/syscall.c\uff0c\u91cc\u9762\u5148\u7ed9\u51fa\u4e864\u4e2d\u7cfb\u7edf\u8c03\u7528\u51fd\u6570\u7684\u8c03\u7528\u65b9\u5f0f\uff0c\u5206\u522b\u4e3asyscall0,syscall1,syscall2,syscall3\uff0c\u6bcf\u79cd\u65b9\u5f0f\u9700\u8981\u4f20\u5165\u7684\u53c2\u6570\u4e0d\u540c\uff0c\u4f46\u6240\u6709\u65b9\u5f0f\u90fd\u5fc5\u9700\u4f20\u5165\u7cfb\u7edf\u8c03\u7528\u53f7\u3002 \u5176\u540e\u8fd8\u7ed9\u51fa\u4e86\u4e0e\u4e0a\u8868\u5bf9\u5e94\u7684\u5c01\u88c5\u5b8c\u6210\u7684\u51fd\u6570\uff0c\u7cfb\u7edf\u5728\u4f7f\u7528\u8fd9\u4e9b\u51fd\u6570\u7684\u65f6\u5019\u7b80\u6d01\u8c03\u7528\u4e86\u4ee5\u4e0a\u5b9a\u4e49\u7684\u56db\u79cd\u7cfb\u7edf\u8c03\u7528\u51fd\u6570\uff0c\u4ee5\u4e0b\u4e3a\u6b64\u6e90\u6587\u4ef6\u7684\u90e8\u5206\u4ee3\u7801\uff1a ```c #define syscall0(NUMBER) \\ ({ \\ int retval; \\ asm volatile \\ (\"pushl %[number]; int $0x30; addl $4, %%esp\" \\ : \"=a\" (retval) \\ : [number] \"i\" (NUMBER) \\ : \"memory\"); \\ retval; \\ }) / Invokes syscall NUMBER, passing argument ARG0, and returns the return value as an `int'. / #define syscall1(NUMBER, ARG0) \\ ({ \\ int retval; \\ asm volatile \\ (\"pushl %[arg0]; pushl %[number]; int $0x30; addl $8, %%esp\" \\ : \"=a\" (retval) \\ : [number] \"i\" (NUMBER), \\ [arg0] \"g\" (ARG0) \\ : \"memory\"); \\ retval; \\ }) / Invokes syscall NUMBER, passing arguments ARG0 and ARG1, and returns the return value as an `int'. / #define syscall2(NUMBER, ARG0, ARG1) \\ ({ \\ int retval; \\ asm volatile \\ (\"pushl %[arg1]; pushl %[arg0]; \" \\ \"pushl %[number]; int $0x30; addl $12, %%esp\" \\ : \"=a\" (retval) \\ : [number] \"i\" (NUMBER), \\ [arg0] \"g\" (ARG0), \\ [arg1] \"g\" (ARG1) \\ : \"memory\"); \\ retval; \\ }) / Invokes syscall NUMBER, passing arguments ARG0, ARG1, and ARG2, and returns the return value as an `int'. / #define syscall3(NUMBER, ARG0, ARG1, ARG2) \\ ({ \\ int retval; \\ asm volatile \\ (\"pushl %[arg2]; pushl %[arg1]; pushl %[arg0]; \" \\ \"pushl %[number]; int $0x30; addl $16, %%esp\" \\ : \"=a\" (retval) \\ : [number] \"i\" (NUMBER), \\ [arg0] \"g\" (ARG0), \\ [arg1] \"g\" (ARG1), \\ [arg2] \"g\" (ARG2) \\ : \"memory\"); \\ retval; \\ }) void exit (int status) { syscall1 (SYS_EXIT, status); NOT_REACHED (); } pid_t exec (const char *file) { return (pid_t) syscall1 (SYS_EXEC, file); } int wait (pid_t pid) { return syscall1 (SYS_WAIT, pid); } bool create (const char *file, unsigned initial_size) { return syscall2 (SYS_CREATE, file, initial_size); } bool remove (const char *file) { return syscall1 (SYS_REMOVE, file); } ``` \u968f\u540e\u6211\u4eec\u8fdb\u4e00\u6b65\u5728\u8be5\u6e90\u4ee3\u7801\u4e2d\u7684\u4e2d\u7684Pintos/src/userprog/syscall.c\u6587\u4ef6\u4e2d\u627e\u5230\u4e86\u4e2d\u65ad\u521d\u59cb\u51fd\u6570\uff1a c void syscall_init (void) { intr_register_int (0x30, 3, INTR_ON, syscall_handler, \"syscall\"); } \u5728\u6b64\u51fd\u6570\u4e2d\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u4e2d\u65ad\u8c03\u7528\u7684\u4e2d\u65ad\u53f7\u4e3a0\u00d730\uff0c\u5e76\u5141\u8bb8\u4e2d\u65ad\u5d4c\u5957\uff0c\u6839\u636e\u5176\u6587\u4ef6\u6240include\u7684\u6587\u4ef6\uff0c\u6211\u4eec\u627e\u5230threads/interrupt.c\u6587\u4ef6\uff0c\u5176\u4e2dintr_register_int\u51fd\u6570\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a c void intr_register_int (uint8_t vec_no, int dpl, enum intr_level level, intr_handler_func *handler, const char *name) { ASSERT (vec_no < 0x20 || vec_no > 0x2f); register_handler (vec_no, dpl, level, handler, name); } \u8fd9\u91cc\u4f20\u5165\u7684\u53c2\u6570\u7b26\u5408\u65ad\u8a00\u8981\u6c42\uff0c\u56e0\u6b64\u53c8\u8fdb\u5165\u4e86register_handler\u51fd\u6570\uff0c\u6b64\u51fd\u6570\u4e2d\u4f7f\u7528\u7684\u6570\u7ec4\u5219\u6d89\u53ca\u5230intr-stubs.S\u6c47\u7f16\u6587\u4ef6\u7684\u6570\u7ec4\uff0c\u5176\u4e2d\u7684\u4fe1\u606f\u5305\u62ec\u4e86\u8c03\u7528\u7684\u529f\u80fd\u53f7\u53ca\u5176\u4ed6\u9650\u5236\u4fe1\u606f\u3002\u81f3\u6b64\u7cfb\u7edf\u8c03\u7528\u7684\u8fc7\u7a0b\u5168\u90e8\u5b8c\u6210\u3002\u4ee5\u4e0b\u4e3a\u6d41\u7a0b\u56fe\uff1a","title":"1. \uff08\u7cfb\u7edf\u8c03\u7528\u5b9e\u9a8c\uff09\u4e86\u89e3\u7cfb\u7edf\u8c03\u7528\u4e0d\u540c\u7684\u5c01\u88c5\u5f62\u5f0f"},{"location":"\u64cd\u4f5c\u7cfb\u7edf\u7b2c\u4e00\u6b21\u5b9e\u9a8c/#2","text":"1 \u7f16\u8bd1\u8fd0\u884c\u8be5\u7a0b\u5e8f\uff08cpu.c\uff09\uff0c\u89c2\u5bdf\u8f93\u51fa\u7ed3\u679c\uff0c\u8bf4\u660e\u7a0b\u5e8f\u529f\u80fd\u3002 \u6e90\u7a0b\u5e8f cpu.c : ```c #include #include #include #include #include int main(int argc, char argv[]){ if(argc != 2){ fprintf(stderr,\"usage:cpu \\n\"); exit(1); } char str = argv[1]; while(1){ sleep(1); printf(\"%s\\n\",str); } return 0; } ``` \u4f7f\u7528gcc\u7f16\u8bd1\u8fd0\u884c\uff1a \u7531\u4e0a\u56fe\u53ef\u89c1\u7a0b\u5e8f\u8fd0\u884c\u6210\u529f\uff0c\u901a\u8fc7\u5206\u6790C\u8bed\u8a00\u6e90\u4ee3\u7801\u53ef\u77e5\uff0c\u6b64\u7a0b\u5e8f\u5171\u6709\u4e24\u4e2a\u529f\u80fd\uff0c\u5f53\u4e0d\u8f93\u5165\u53c2\u6570\u6216\u8f93\u5165\u591a\u4e2a\u53c2\u6570\u8fd0\u884c\u65f6\uff0c\u4f1a\u76f4\u63a5\u5728\u5c4f\u5e55\u4e0a\u6253\u5370\u51fa\u6b64\u7a0b\u5e8f\u9700\u8981\u4f20\u5165\u7684\u53c2\u6570\u548c\u7528\u5904\uff0c\u5373\u6253\u5370\u201cusage:cpu \u201d\uff0c\u5f53\u4f20\u5165\u53c2\u6570\u5b57\u7b26\u4e32\u65f6\uff0c\u4fbf\u4f1a\u76f4\u63a5\u5728\u5c4f\u5e55\u4e0a\u5faa\u73af\u6253\u5370\u8f93\u5165\u7684\u5b57\u7b26\u4e32\uff0c\u4ee5\u4e00\u79d2\u4e3a\u95f4\u9694\u3002 2 \u518d\u6b21\u6309\u4e0b\u9762\u7684\u8fd0\u884c\u5e76\u89c2\u5bdf\u7ed3\u679c\uff1a\u6267\u884c\u547d\u4ee4\uff1a./cpu A & ; ./cpu B & ; ./cpu C & ; ./cpu D &\u7a0b\u5e8fcpu\u8fd0\u884c\u4e86\u51e0\u6b21\uff1f\u4ed6\u4eec\u8fd0\u884c\u7684\u987a\u5e8f\u6709\u4f55\u7279\u70b9\u548c\u89c4\u5f8b\uff1f\u8bf7\u7ed3\u5408\u64cd\u4f5c\u7cfb\u7edf\u7684\u7279\u5f81\u8fdb\u884c\u89e3\u91ca\u3002 \u6309\u7167\u8981\u6c42\u8fd0\u884c\u7a0b\u5e8f\uff1a \u4ece\u4e0a\u56fe\u53ef\u4ee5\u5f97\u77e5\u7cfb\u7edf\u4f7f\u7528\u4e86\u56db\u4e2a\u8fdb\u7a0b\u8fd0\u884c\u8be5\u7a0b\u5e8f\uff0c\u6bcf\u9694\u4e00\u79d2\u5728\u5c4f\u5e55\u4e0a\u6253\u5370\u4e00\u6b21ABCD\uff0c\u7531\u4e8e\u7a0b\u5e8f\u672a\u8bbe\u7f6e\u7ec8\u6b62\u6761\u4ef6\uff0c\u6240\u4ee5\u7a0b\u5e8f\u4f1a\u4e00\u76f4\u8fd0\u884c\u4e0b\u53bb\uff0c\u4f46\u7a0b\u5e8f\u8fd0\u884c\u7684\u987a\u5e8f\u5e76\u4e0d\u786e\u5b9a\u3002\u8fd9\u662f\u56e0\u4e3a\u5982\u4eca\u7684\u64cd\u4f5c\u7cfb\u7edf\u5728\u540c\u65f6\u8fd0\u884c\u591a\u4e2a\u7a0b\u5e8f\u65f6\u4f1a\u5e76\u53d1\u6267\u884c\u800c\u4e0d\u662f\u987a\u5e8f\u6267\u884c\uff0c\u4e5f\u5c31\u662f\u5177\u6709\u5e76\u53d1\u7684\u7279\u5f81\u3002\u7a0b\u5e8f\u5728\u5e76\u53d1\u6267\u884c\u65f6\uff0c\u662f\u591a\u4e2a\u7a0b\u5e8f\u5171\u4eab\u7cfb\u7edf\u4e2d\u7684\u5404\u79cd\u8d44\u6e90\uff0c\u56e0\u800c\u8fd9\u4e9b\u8d44\u6e90\u7684\u72b6\u6001\u5c06\u7531\u591a\u4e2a\u7a0b\u5e8f\u6765\u6539\u53d8\uff0c\u81f4\u4f7f\u7a0b\u5e8f\u7684\u8fd0\u884c\u5931\u53bb\u4e86\u5c01\u95ed\u6027\u3002\u8fd9\u6837\uff0c\u67d0\u7a0b\u5e8f\u5728\u6267\u884c\u65f6\uff0c\u5fc5\u7136\u4f1a\u53d7\u5230\u5176\u5b83\u7a0b\u5e8f\u7684\u5f71\u54cd\u3002\u4f8b\u5982\uff0c\u5f53\u5904\u7406\u673a\u8fd9\u4e00\u8d44\u6e90\u5df2\u88ab\u67d0\u4e2a\u7a0b\u5e8f\u5360\u6709\u65f6\uff0c\u53e6\u4e00\u7a0b\u5e8f\u5fc5\u987b\u7b49\u5f85\u3002\u7a0b\u5e8f\u5728\u5e76\u53d1\u6267\u884c\u65f6\uff0c\u7531\u4e8e\u5931\u53bb\u4e86\u5c01\u95ed\u6027\uff0c\u4e5f\u5c06\u5bfc\u81f4\u5176\u518d\u5931\u53bb\u53ef\u518d\u73b0\u6027\u3002\u56e0\u6b64\u6bcf\u4e00\u8f6e\u7a0b\u5e8f\u7684\u8fd0\u884c\u987a\u5e8f\u90fd\u4f1a\u4e0d\u5c3d\u76f8\u540c\u3002","title":"2. \uff08\u5e76\u53d1\u5b9e\u9a8c\uff09\u6839\u636e\u4ee5\u4e0b\u4ee3\u7801\u5b8c\u6210\u4e0b\u9762\u7684\u5b9e\u9a8c\u3002"},{"location":"\u64cd\u4f5c\u7cfb\u7edf\u7b2c\u4e00\u6b21\u5b9e\u9a8c/#3","text":"1 \u9605\u8bfb\u5e76\u7f16\u8bd1\u8fd0\u884c\u8be5\u7a0b\u5e8f(mem.c)\uff0c\u89c2\u5bdf\u8f93\u51fa\u7ed3\u679c\uff0c\u8bf4\u660e\u7a0b\u5e8f\u529f\u80fd\u3002 \u7a0b\u5e8f\u6e90\u4ee3\u7801 mem.c \uff1a ```c #include #include #include #include int main(int argc,char argv[]){ int p = malloc(sizeof(int)); //a1 assert(p != NULL); printf(\"(%d) address pointed to by p:%p\\n\",getpid(),p); //a2 p = 0;//a3 while(1){ sleep(1); p = p + 1; printf(\"(%d) p:%d\\n\",getpid(), p);//a4 } return 0; } ``` \u5728Linux\u7cfb\u7edf\u4e0b\u4f7f\u7528gcc\u7f16\u8bd1\u5e76\u8fd0\u884c\uff1a \u7531\u4e0a\u56fe\u7684\u8fd0\u884c\u7ed3\u679c\u7ed3\u5408\u6e90\u7801\u8fdb\u884c\u5206\u6790\u53ef\u77e5\u9053\uff0c\u8be5\u7a0b\u5e8f\u5148\u4e3a\u4e00\u4e2a\u6307\u9488\u7533\u8bf7\u4e86\u4e00\u4e2a\u6574\u6570\u5b57\u7b26\u7a7a\u95f4\u5927\u5c0f\u7684\u7a7a\u95f4\uff0c\u968f\u540e\u6253\u5370\u51fa\u8fdb\u7a0b\u53f7\u548c\u7533\u8bf7\u7684\u5185\u5b58\u7a7a\u95f4\u7684\u9996\u5730\u5740\u5e76\u5c06\u5185\u5b58\u4e2d\u50a8\u5b58\u7684\u6574\u6570\u5b57\u7b26\u7f6e\u4e3a0\u3002\u4e4b\u540e\u6bcf\u9694\u4e00\u79d2\u5c06\u8be5\u6574\u6570\u52a01\u5e76\u6253\u5370\u5176\u503c\u4e8e\u5c4f\u5e55\u4e0a\uff0c\u5faa\u73af\u5f80\u590d\u4e0d\u8bbe\u7ec8\u7ed3\u3002 3.2\u518d\u6b21\u6309\u4e0b\u9762\u7684\u547d\u4ee4\u8fd0\u884c\u5e76\u89c2\u5bdf\u7ed3\u679c\u3002\u4e24\u4e2a\u5206\u522b\u8fd0\u884c\u7684\u7a0b\u5e8f\u5206\u914d\u7684\u5185\u5b58\u5730\u5740\u662f\u5426\u76f8\u540c\uff1f\u662f\u5426\u5171\u4eab\u540c\u4e00\u5757\u7269\u7406\u5185\u5b58\u533a\u57df\uff1f\u4e3a\u4ec0\u4e48\uff1f \u6309\u7167\u9898\u76ee\u8981\u6c42\u540c\u65f6\u8fd0\u884c\u4e24\u4e2amem\u7a0b\u5e8f \u7531\u4e0a\u56fe\u7684\u7ed3\u679c\u6211\u4eec\u53ef\u4ee5\u5f97\u77e5\u4e24\u4e2a\u8fdb\u7a0b\u5206\u522b\u7ed9\u4e0e\u4e86\u4e0d\u540c\u7684\u5185\u5b58\u5730\u5740\uff0c\u5176\u64cd\u4f5c\u7684\u6570\u503c\u4e92\u4e0d\u5e72\u6270\uff0c\u5e76\u53d1\u8fd0\u884c\u3002\u8868\u9762\u4e0a\u770b\u5e76\u6ca1\u6709\u5171\u4eab\u4e00\u5757\u5185\u5b58\u5730\u5740\u3002\u901a\u8fc7\u67e5\u9605\u76f8\u5173\u8d44\u6599\uff0cLinux\u4e2d\u7684\u8fdb\u7a0b\u5185\u5b58\u7ba1\u7406\u91c7\u7528\u7684\u662f\u865a\u62df\u5185\u5b58\u7ba1\u7406\u6280\u672f\uff0cLinux\u64cd\u4f5c\u7cfb\u7edf\u91c7\u7528\u865a\u62df\u5185\u5b58\u7ba1\u7406\u6280\u672f\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u5404\u81ea\u4e92\u4e0d\u5e72\u6d89\u7684\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\u3002\u8be5\u7a7a\u95f4\u662f\u5757\u5927\u5c0f\u4e3a4G\u7684\u7ebf\u6027\u865a\u62df\u7a7a\u95f4\uff0c\u7528\u6237\u6240\u770b\u5230\u548c\u63a5\u89e6\u5230\u7684\u90fd\u662f\u8be5\u865a\u62df\u5730\u5740\uff0c\u65e0\u6cd5\u770b\u5230\u5b9e\u9645\u7684\u7269\u7406\u5185\u5b58\u5730\u5740\u3002\u5229\u7528\u8fd9\u79cd\u865a\u62df\u5730\u5740\u4e0d\u4f46\u80fd\u8d77\u5230\u4fdd\u62a4\u64cd\u4f5c\u7cfb\u7edf\u7684\u6548\u679c\uff08\u7528\u6237\u4e0d\u80fd\u76f4\u63a5\u8bbf\u95ee\u7269\u7406\u5185\u5b58\uff09\uff0c\u800c\u4e14\u66f4\u91cd\u8981\u7684\u662f\uff0c\u7528\u6237\u7a0b\u5e8f\u53ef\u4f7f\u7528\u6bd4\u5b9e\u9645\u7269\u7406\u5185\u5b58\u66f4\u5927\u7684\u5730\u5740\u7a7a\u95f4\u3002 \u6bcf\u4e00\u4e2a\u8fdb\u7a0b\u90fd\u8fd0\u884c\u5728\u4e00\u4e2a\u5c5e\u4e8e\u5b83\u81ea\u5df1\u7684\u5185\u5b58\u6c99\u76d8\u4e2d\uff0c\u8fd9\u4e2a\u6c99\u76d8\u5c31\u662f\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff0c\u572832\u4f4d\u6a21\u5f0f\u4e0b\u5b83\u603b\u662f\u4e00\u4e2a4GB\u7684\u5185\u5b58\u5730\u5740\u5757\u3002\u8fd9\u4e9b\u865a\u62df\u5730\u5740\u901a\u8fc7\u9875\u8868\u6620\u5c04\u5230\u7269\u7406\u5185\u5b58\uff0c\u9875\u8868\u7531\u64cd\u4f5c\u7cfb\u7edf\u7ef4\u62a4\u5e76\u88ab\u5904\u7406\u5668\u5f15\u7528\u3002\u56e0\u6b64\u867d\u7136\u4e24\u4e2a\u8fdb\u7a0b\u7684\u865a\u62df\u5185\u5b58\u5730\u5740\u5e76\u4e0d\u76f8\u540c\uff0c\u4e5f\u4e0d\u4ee3\u8868\u5b83\u4eec\u7684\u5b9e\u9645\u5185\u5b58\u5730\u5740\u4e0d\u540c\uff0c\u4f46\u5b83\u4eec\u4e00\u5b9a\u90fd\u5e94\u7528\u7684\u662f\u540c\u4e00\u5757\u8fde\u7eed\u7684\u5185\u5b58\u5757\u3002","title":"3. \uff08\u5185\u5b58\u5206\u914d\u5b9e\u9a8c\uff09\u6839\u636e\u4ee5\u4e0b\u4ee3\u7801\u5b8c\u6210\u5b9e\u9a8c\u3002"},{"location":"\u64cd\u4f5c\u7cfb\u7edf\u7b2c\u4e00\u6b21\u5b9e\u9a8c/#4","text":"1\u9605\u8bfb\u5e76\u7f16\u8bd1\u8fd0\u884c\u8be5\u7a0b\u5e8f\uff0c\u89c2\u5bdf\u8f93\u51fa\u7ed3\u679c\uff0c\u8bf4\u660e\u7a0b\u5e8f\u529f\u80fd\u3002 \u7a0b\u5e8f\u6e90\u4ee3\u7801 thread.c : ```c #include #include #include #include volatile int counter = 0; int loops; void worker(void arg){ int i; for(i = 0;i < loops;i++){ counter++; } return NULL; } int main(int argc,char *argv[]){ if(argc != 2){ fprintf(stderr,\"usage:threads \\n\"); exit(1); } loops = atoi(argv[1]); pthread_t p1,p2; printf(\"Initial value:%d\\n\",counter); pthread_create(&p1,NULL,worker,NULL); pthread_create(&p2,NULL,worker,NULL); pthread_join(p1,NULL); pthread_join(p2,NULL); printf(\"Final value:%d\\n\",counter); return 0; } ``` \u5728Linux\u4e0b\u4f7f\u7528gcc\u7f16\u8bd1\u5e76\u8fd0\u884c\uff1a \u7531\u4ee5\u4e0a\u7ed3\u679c\u7ed3\u5408\u6e90\u4ee3\u7801\u5206\u6790\u53ef\u77e5\uff0c\u5f53\u4e0d\u8f93\u5165\u4efb\u4f55\u53c2\u6570\u6216\u8005\u8f93\u5165\u591a\u4e2a\u53c2\u6570\u65f6\u7a0b\u5e8f\u4f1a\u8fdb\u884c\u62a5\u9519\uff0c\u5728\u5c4f\u5e55\u4e0a\u6253\u5370\u51fa\u7a0b\u5e8f\u7684\u4f7f\u7528\u65b9\u6cd5\u3002\u5f53\u8f93\u5165\u53c2\u6570\uff08\u59821000\uff09\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u4f7f\u7528\u4e24\u4e2a\u8fdb\u7a0b\u5bf9\u5171\u540c\u53d8\u91cfcounter\u53d8\u91cf\u8fdb\u884c\u5faa\u73af\u52a01\uff0c\u5faa\u73af\u6b21\u6570\u4e3aloops\u7684\u503c\uff0c\u5373\u8f93\u5165\u53c2\u6570\u7684\u5927\u5c0f\uff0c\u6700\u540e\u5c06counter\u7684\u503c\u6253\u5370\u5728\u5c4f\u5e55\u4e0a\u3002 4.2 \u5c1d\u8bd5\u5176\u4ed6\u8f93\u5165\u53c2\u6570\u5e76\u6267\u884c\uff0c\u5e76\u603b\u7ed3\u6267\u884c\u7ed3\u679c\u7684\u6709\u4f55\u89c4\u5f8b\uff1f\u4f60\u80fd\u5c1d\u8bd5\u89e3\u91ca\u5b83\u5417\uff1f\uff08\u4f8b\u5982\u6267\u884c\u547d\u4ee42\uff1a./thread 100000\uff09 \u5f53\u8f93\u5165\u53c2\u6570100000\u4e4b\u540e\uff0c\u53ef\u4ee5\u53d1\u73b0\u6253\u5370\u51fa\u6765\u7684\u6700\u540e\u7ed3\u679c\u5e76\u4e0d\u4e3a200000\uff0c\u800c\u662f\u8fdc\u5c0f\u4e8e\u5b83\uff0c\u968f\u540e\u81ea\u5df1\u5c1d\u8bd5\u4e86\u66f4\u5927\u7684\u53c2\u6570\uff0c\u7ed3\u679c\u4e5f\u662f\u5982\u6b64\u3002\u901a\u8fc7\u67e5\u627e\u76f8\u5173\u8d44\u6599\u53ef\u4ee5\u5f97\u77e5volatile\u5173\u952e\u5b57\u53ef\u4ee5\u88ab\u89e3\u91ca\u4e3a\u201c\u76f4\u63a5\u5b58\u53d6\u539f\u59cb\u5185\u5b58\u5730\u5740\u201d\uff0c\u56e0\u6b64\u6bcf\u6b21\u7f16\u8bd1\u5668\u5c31\u4f1a\u76f4\u63a5\u4ece\u5185\u5b58\u5730\u5740\u4e2d\u8bfb\u53d6\u8be5\u5173\u952e\u5b57\u4fee\u9970\u7684\u53d8\u91cf\u7684\u503c\uff0c\u5f53\u4e24\u4e2a\u7ebf\u7a0b\u90fd\u8981\u7528\u5230\u67d0\u4e00\u4e2a\u53d8\u91cf\u4e14\u8be5\u53d8\u91cf\u7684\u503c\u4f1a\u88ab\u6539\u53d8\u65f6\uff0c\u5e94\u8be5\u7528 volatile \u58f0\u660e\uff0c\u8be5\u5173\u952e\u5b57\u7684\u4f5c\u7528\u662f\u9632\u6b62\u4f18\u5316\u7f16\u8bd1\u5668\u628a\u53d8\u91cf\u4ece\u5185\u5b58\u88c5\u5165CPU\u5bc4\u5b58\u5668\u4e2d\u3002\u5982\u679c\u53d8\u91cf\u88ab\u88c5\u5165\u5bc4\u5b58\u5668\uff0c\u90a3\u4e48\u4e24\u4e2a\u7ebf\u7a0b\u6709\u53ef\u80fd\u4e00\u4e2a\u4f7f\u7528\u5185\u5b58\u4e2d\u7684\u53d8\u91cf\uff0c\u4e00\u4e2a\u4f7f\u7528\u5bc4\u5b58\u5668\u4e2d\u7684\u53d8\u91cf\uff0c\u8fd9\u4f1a\u9020\u6210\u7a0b\u5e8f\u7684\u9519\u8bef\u6267\u884c\u3002 \u4f46\u5355\u7eaf\u4f7f\u7528\u8be5\u5173\u952e\u5b57\u800c\u6ca1\u6709\u9501\u7684\u673a\u5236\uff0c\u4f1a\u662f\u8fdb\u7a0b\u8bfb\u51fa\u810f\u6570\u636e\uff0c\u5373\u8fc7\u65f6\u7684\u6570\u636e\uff0c\u5728\u672c\u7a0b\u5e8f\u4e2d\u53ef\u8868\u73b0\u4e3a\u8fdb\u7a0b1\u521a\u4ece\u5185\u5b58\u4e2d\u8bfb\u51fa\u6570\u636e\u5e76\u52a01\uff0c\u5728\u5b83\u4fdd\u5b58\u56de\u5176\u5185\u5b58\u4e4b\u524d\uff0c\u8fdb\u7a0b2\u5c31\u5df2\u7ecf\u8bfb\u51fa\u4e86\u5185\u5b58\u4e2d\u7684\u6570\u503c\u5e76\u8fdb\u884c\u8fd0\u7b97\uff0c\u6240\u4ee5\u672c\u8be5\u6709\u4e24\u6b21\u52a0\u6cd5\u8fd0\u7b97\u7684\u503c\u6700\u540e\u7684\u7ed3\u679c\u53ea\u8fdb\u884c\u4e86\u4e00\u6b21\u8fd0\u7b97\uff0c\u9020\u6210\u4e86\u6700\u7ec8\u7ed3\u679c\u8fdc\u5c0f\u4e8eloops\u503c\u7684\u4e24\u500d\u3002","title":"4. \uff08\u5171\u4eab\u7684\u95ee\u9898\uff09\u6839\u636e\u4ee5\u4e0b\u4ee3\u7801\u5b8c\u6210\u5b9e\u9a8c\u3002"}]}